-- this code replicates the bit32 library for Lua 5.4
-- generated by ChatGPT on March 13, 2023

local bit32 = {}

-- helper function to ensure a valid bit position
local function checkbit(n)
  n = tonumber(n)
  if n < 0 or n > 31 or math.floor(n) ~= n then
    error("bit index out of range", 2)
  end
  return n
end

-- bitwise operations
function bit32.band(...)
  local arg = {...}
  local res = arg[1]
  for i = 2, #arg do
    res = res & arg[i]
  end
  return res
end

function bit32.bor(...)
  local arg = {...}
  local res = arg[1]
  for i = 2, #arg do
    res = res | arg[i]
  end
  return res
end

function bit32.bxor(...)
  local arg = {...}
  local res = arg[1]
  for i = 2, #arg do
    res = res ~ arg[i]
  end
  return res
end

function bit32.bnot(n)
  return ~n
end

function bit32.lshift(n, disp)
  return n << disp
end

function bit32.rshift(n, disp)
  return n >> disp
end

function bit32.arshift(n, disp)
  return n >> disp
end

function bit32.extract(n, field, width)
  field = checkbit(field)
  width = checkbit(width)
  if width == 0 then
    return 0
  else
    return (n >> field) & ~(~0 << width)
  end
end

function bit32.replace(n, v, field, width)
  field = checkbit(field)
  width = checkbit(width)
  if width == 0 then
    return n
  else
    local mask = ~(~0 << width) << field
    return (n & ~mask) | ((v << field) & mask)
  end
end

return bit32
